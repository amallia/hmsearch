{"name":"Hmsearch","tagline":"C++ implementation of hamming distance algorithm HmSearch using Kyoto Cabinet","body":"hmsearch\r\n========\r\n\r\nC++ implementation of hamming distance algorithm HmSearch using Kyoto\r\nCabinet.\r\n\r\nThe algorithm is described in the paper \"HmSearch: An Efficient\r\nHamming Distance Query Processing Algorithm\" by Xiaoyang Zhang,\r\nJianbin Qin, Wei Wang, Yifang Sun and Jiaheng Lu.\r\n\r\n\r\nInstallation\r\n------------\r\n\r\nEnsure that Kyoto Cabinet is installed. On Ubuntu:\r\n\r\n    apt-get install libkyotocabinet-dev kyotocabinet-utils\r\n\r\nThen there should be a configure script, but for now just hit `make`.\r\n\r\n\r\nLibrary usage\r\n-------------\r\n\r\nSee the documentation in `hmsearch.h`\r\n\r\n\r\nTool usage\r\n----------\r\n\r\nCreate a new database, providing hash size in bits, the max error\r\n(hamming distance), and the expected number of hashes in the\r\ndatabase.  E.g.:\r\n\r\n    ./hm_initdb hashes.kch 256 10 100000000\r\n\r\n\r\nAdd hashes with `hm_insert`, either providing them on the command line\r\nor on stdin:\r\n\r\n    ./hm_insert hashes.kch 6E6FB315FA8C43FE9C2687D5BE14575ABB7252104236747D571B97E003563DF0\r\n    ./hm_insert hashes.kch < list-of-hashes\r\n\r\n\r\nLookup hashes with `hm_insert`, again providing a list of hashes on\r\nthe command line or on stdin:\r\n    \r\n    ./hm_lookup hashes.kch 6F6FB315FA8C43FE9C2687D5BE14575ABB7252104236747D571B97E003563DF0\r\n    ./hm_lookup hashes.kch < list-of-query-hashes\r\n\r\nIt will output all found hashes together with the hamming distance.\r\n\r\n`hm_dump` outputs the internal structure of the database, and is only\r\nuseful for debugging.  `kchashmgr inform -st` can be used to get\r\nfurther information about the underlying database.\r\n\r\nTo help testing and tuning, there are a few Python tools:\r\n\r\n    ./gen_hashes.py HASH_SIZE NUM_HASHES | ./hm_insert hashes.kch\r\n    ./select.py NUM_LINES < list-of-hashes | ./hm_lookup hashes.kch\r\n    ./select.py NUM_LINES < list-of-hashes | ./flip.py BITS_TO_FLIP | ./hm_lookup hashes.kch\r\n\r\n\r\nLimitations\r\n-----------\r\n\r\nThe code only supports a binary value space (i.e. 0 and 1), not the\r\nlarger spaces of full HmSearch.\r\n\r\nHashes must be an even number of bytes.\r\n\r\nThis code will degrade once the probability of several hashes sharing\r\nthe same partition value goes above perhaps 0.1.  To handle that case,\r\nthe HmSearch::init() need to be extended to tune the database to align\r\nrecords so that each append of a hash doesn't always require moving\r\nthe whole record.\r\n\r\nThere's also other changes that can be done to optimise this, but the\r\ncode works pretty well at least for 25M 256-bit hashes on a regular\r\nlaptop with SSD.\r\n\r\n\r\nLicense\r\n-------\r\n\r\nCopyright 2014 Commons Machinery http://commonsmachinery.se/\r\n\r\nDistributed under an MIT license, please see LICENSE in the top dir.\r\n\r\nContact: dev@commonsmachinery.se\r\n\r\n","google":"UA-38814645-4","note":"Don't delete this file! It's used internally to help with page regeneration."}